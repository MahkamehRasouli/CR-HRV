import pandas as pd
from datetime import datetime
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Assuming resultsm is your DataFrame
resultsm['Date_Time'] = pd.to_datetime(resultsm['Date'] + ' ' + resultsm['formatted_time'])
resultsm['User'] = resultsm['User'].apply(lambda x: None if x == 0 else x)

# Impute missing HRV_RMSSD values based on time, user, and pregnancy month
resultsm_imputed = (
    resultsm.sort_values(by=['User', 'PregnancyMonth', 'Date_Time'])
    .groupby(['User', 'PregnancyMonth'])
    .apply(lambda group: group.interpolate())
    .reset_index(drop=True)
)

# Print the head of the imputed resultsm DataFrame
print(resultsm_imputed.head())

# Split the data
train_data, test_data = train_test_split(resultsm_imputed, test_size=0.2, random_state=123)

# Train the imputation model
imputation_model = LinearRegression().fit(
    train_data[['User', 'PregnancyMonth', 'Date_Time', 'formatted_time']],
    train_data['HRV_RMSSD_Average']
)

# Impute missing values in the test set
test_data['HRV_RMSSD_Imputed_Predicted'] = imputation_model.predict(
    test_data[['User', 'PregnancyMonth', 'Date_Time', 'formatted_time']]
)

# Evaluate the model
mae = mean_absolute_error(test_data['HRV_RMSSD_Average'], test_data['HRV_RMSSD_Imputed_Predicted'])
mse = mean_squared_error(test_data['HRV_RMSSD_Average'], test_data['HRV_RMSSD_Imputed_Predicted'])
rmse = mse**0.5

# Print evaluation metrics
print("MAE:", mae)
print("MSE:", mse)
print("RMSE:", rmse)

# Remove rows with NA values in HRV_RMSSD_Average or HRV_RMSSD_Imputed_Predicted
test_data = test_data.dropna(subset=['HRV_RMSSD_Average', 'HRV_RMSSD_Imputed_Predicted'])

# Calculate evaluation metrics
mae = mean_absolute_error(test_data['HRV_RMSSD_Average'], test_data['HRV_RMSSD_Imputed_Predicted'])
mse = mean_squared_error(test_data['HRV_RMSSD_Average'], test_data['HRV_RMSSD_Imputed_Predicted'])
rmse = mse**0.5

# Print evaluation metrics
print("MAE:", mae)
print("MSE:", mse)
print("RMSE:", rmse)
